name: "k8s deploy"
description: "deploy to k8s"
inputs: 
  AWS_REGION: 
    required: false
    default: "eu-west-1"      
  AWS_ACCESS_KEY:
    required: true
  AWS_SECRET_KEY: 
    required: true
  K8S_TEMPLATES_MAIN:
    required: false
    default: ".k8s/templates/config .k8s/templates/serviceaccount .k8s/templates/service-tier .k8s/templates/ingress-tier"    
  K8S_TEMPLATES_DEPLOYMENTS:
    required: false
    default: ".k8s/templates/deployment-tier"    
  K8S_TEMPLATES_DEPLOYMENTS_EXTRA:
    required: false
    default: ""       
  K8S_TEMPLATES_EXTRA:
    required: false
    default: ""    
  # ACTION:
  #   required: true
runs:
  using: "composite"
  steps:

    - name: set action deploy
      if: ${{ github.event.action != 'closed' }}
      shell: bash
      run: echo ACTION="deploy" >> $GITHUB_ENV

    - name: set action delete
      if: ${{ github.event.action == 'closed' }}
      shell: bash
      run: echo ACTION="delete" >> $GITHUB_ENV
    
    - uses: FranzDiebold/github-env-vars-action@v2

    - name: Set deployment id
      shell: bash
      run: |
        echo DEPLOYMENT_ID="${PROJECT}-${ENVIRONMENT}-${ENERINAPP}" >> $GITHUB_ENV      

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS credentials
      id: login-aws
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_KEY }}
        aws-region: ${{ inputs.AWS_REGION }}

    - name: set aws account env
      shell: bash
      run: |
        echo AWS_ACCOUNT_ID="${{ steps.login-aws.outputs.aws-account-id }}"  >> $GITHUB_ENV  

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registries: ${{ inputs.DOCKER_REGISTRY_NAME }}

    - name: override envvars
      shell: bash
      run: |
        if [ -f ".env-override.$CI_REF_NAME_SLUG.yml" ]; then 
          for tmpl in ${{ inputs.K8S_TEMPLATES_DEPLOYMENTS }} ${{ inputs.K8S_TEMPLATES_DEPLOYMENTS_EXTRA }}; do 
            if [ -f ${tmpl}.yml ]; then 
              item="$(< .env-override.$CI_REF_NAME_SLUG.yml)" yq eval --inplace '.spec.template.spec.containers[] |= .env += env(item) ' ${tmpl}.yml
            fi 
          done
        fi

    - name: prep manifests
      shell: bash
      run: |
        for tmpl in ${{ inputs.K8S_TEMPLATES_MAIN}} ${{ inputs.K8S_TEMPLATES_DEPLOYMENTS }} ${{ inputs.K8S_TEMPLATES_DEPLOYMENTS_EXTRA }} ${{inputs.K8S_TEMPLATES_EXTRA}}; do 
          if [ -f ${tmpl}.yml ]; then 
            echo "Processiong ${tmpl}.yml"
            cat  ${tmpl}.yml | envsubst > ${tmpl}.processed.yml
            echo "Generated ${tmpl}.processed.yml:"
            MANIFESTS="$MANIFESTS ${tmpl}.processed.yml"
            cat ${tmpl}.processed.yml
            echo "...."
          fi 
        done
        echo MANIFESTS="$MANIFESTS" >> $GITHUB_ENV
        for i in `yq e -N 'select(.kind == "Deployment").metadata.name' $MANIFESTS`;do DEPLOYMENTS="$DEPLOYMENTS $i"; done
        echo DEPLOYMENTS="$DEPLOYMENTS" >> $GITHUB_ENV
        echo $DEPLOYMENTS 

    - name: apply config
      if: ${{ env.ACTION == 'deploy' }}
      uses: enerinvest/actions-kubectl-eks@1.0
      with:
        args: for i in $MANIFESTS; do kubectl apply -f $i; done
      env: 
        MANIFESTS: "${{ env.MANIFESTS }}"

    - name: delete config
      if: ${{ env.ACTION == 'delete' }}
      uses: enerinvest/actions-kubectl-eks@1.0
      with:
        args: for i in $MANIFESTS; do kubectl delete -f $i; done
      env: 
        MANIFESTS: "${{ env.MANIFESTS }}"

    - name: rollout status
      if: ${{ env.ACTION == 'deploy' }}
      uses: enerinvest/actions-kubectl-eks@1.0
      with:
        args: for i in $DEPLOYMENTS; do echo $i status:; kubectl rollout status -w deployment/$i --timeout 60s; done
      env: 
        DEPLOYMENTS: "${{ env.DEPLOYMENTS }}"        


